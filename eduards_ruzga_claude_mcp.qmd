---
title: Eduards Ruzga- Claude with MCPs Replaced Cursor & Windsurf
date: 2025-05-02 09:29:52
---
**:Model Instructions:** 

  ---

  
**:You:** please summarize this video in detail

[![Claude with MCPs Replaced Cursor & Windsurf — How Did That Happen?](https://i.ytimg.com/vi/ly3bed99Dy8/maxresdefault.jpg)](https://www.youtube.com/watch?v=ly3bed99Dy8)

---

**:01JR0E39PYK7YKH4FBR4W00CMV::gemini-2.5-pro-exp-03-25:** Okay, here is a detailed summary of the YouTube video "Claude with MCPs Replaced Cursor & Windsurf — How Did That Happen?" by Eduards Ruzga:

**Core Argument & Introduction:**

*   The speaker, Eduards Ruzga, explains that he has unexpectedly stopped using paid tools like Windsurf (code-aware IDE/chat) and Cursor (AI-first code editor), despite having started paying for Windsurf in December.
*   The primary reason for this shift is his adoption and development of a system combining Anthropic's Claude AI with **MCPs (Master Control Programs/Protocols)**.
*   He highlights that giving Claude access to tools via MCPs drastically increases its utility. His own usage of Claude has increased 5x in the last three months compared to previous periods, demonstrating this enhanced value.
*   He has developed his own **"mCP server"** which allows Claude to interact with the user's local machine. This server enables:
    *   Running **long-running processes** (e.g., video encoding) without blocking the chat, managing them via process IDs.
    *   Accessing the **file system** for tasks like large codebase exploration, reading files/READMEs, generating documentation, and creating diagrams.
    *   **Editing code files**, including diff editing, multi-file editing, and even multi-repository operations (he gives an example of migrating 30 files/3.5k lines for a side project with only one manual fix needed).

**MCP Server Installation:**

*   Eduards has published his mCP server to npm and made it easily installable via **Smi (Sidecar Manager Interface)**.
*   He demonstrates the simple, one-line installation process in the terminal, requiring only Node.js and the Claude Desktop App to be pre-installed.
*   After restarting the Claude app, the server automatically connects and adds around 19 tools (list directories, edit files, execute commands, kill processes, etc.) to Claude's capabilities within the chat interface.

**Demonstration 1: Codebase Exploration & Diagramming:**

*   He showcases using Claude + MCPs to explore the mCP server's own codebase.
*   He instructs Claude to explore a given directory path, read relevant files (README, package.json, source files), understand the structure and functionality, and generate **Mermaid.js diagrams** directly within the chat window.
*   Claude successfully lists files, reads key code files, and produces several diagrams (component, sequence, architecture) explaining how the mCP server works, including handling terminal commands and long-running processes.
*   He praises this as a way to quickly understand unfamiliar codebases and highlights the advantage of having visual artifacts directly in the chat, something not typically done with Windsurf/Cursor.

**Comparison with Windsurf:**

*   He attempts the same codebase exploration and diagramming task using Windsurf (with Claude 3 Sonnet model).
*   Windsurf *can* perform the task but requires generating an external **HTML file** for the diagrams, lacking the inline visual benefit.
*   He points out several **friction points** with Windsurf for this use case: needing to open the project folder first, waiting for indexing/loading, occasional errors (like a "Cascade" error during his first attempt), sometimes reading only partial files (though it seemed okay in this specific instance), and generally feeling less direct and more cumbersome than simply giving Claude a path.

**Demonstration 2: Long-Running Processes (Video Encoding):**

*   He shows a pre-recorded chat demonstrating Claude using the mCP server to **compress a large video file (2.5GB)** using FFmpeg.
*   Claude executes commands to analyze the file, then starts the FFmpeg compression process.
*   Crucially, the mCP server runs FFmpeg in the background, returns a **process ID** to Claude, and allows Claude to periodically query the process for new output/status updates without blocking the chat.
*   He demonstrates asking Claude for progress updates, where Claude reads the latest FFmpeg output, calculates remaining time, and reports on bitrate reduction.
*   Finally, Claude confirms the process completion and reports the significantly reduced file size (237MB).
*   This showcases a capability (managing long-running, complex local tasks) that typical AI code assistants like Windsurf/Cursor are not designed for.

**Demonstration 3: Coding & Development (Live Project):**

*   He performs a live coding session to demonstrate creating a simple web application from scratch using Claude + MCPs.
*   The goal: a webpage with a full-screen webcam feed that uses **MediaPipe** for hand gesture detection to allow drawing and erasing on the screen.
*   Claude:
    *   Creates a new project folder.
    *   Writes the initial HTML, CSS, and JavaScript files, including necessary library imports.
    *   Opens the resulting `index.html` in the browser.
    *   Iteratively refines the application based on his requests: adding a circle cursor for drawing, implementing erasing with an open palm gesture, adjusting cursor/eraser size based on hand distance, removing unwanted features (two-finger mode switching, thumbs-up clearing).
    *   Demonstrates both **full file rewrites** and more precise **block editing** (showing the diff-like instructions it uses).
    *   Successfully implements size scaling for both drawing and erasing based on palm size/distance.
    *   Finally, initializes a Git repository, creates a `.gitignore` file, adds files, commits, adds a remote GitHub URL, and pushes the code to the repository.
    *   He then manually sets up GitHub Pages to deploy the web app live.

**Conclusions & Future Plans:**

*   Eduards concludes that Claude combined with his mCP server offers a more **open and flexible** environment compared to the more "boxed-in" experience of Windsurf/Cursor, especially for tasks beyond pure code editing within a project context (like system-level tasks, long processes, arbitrary file manipulation).
*   The reduced friction and broader capabilities led him to use Windsurf/Cursor less and less, prompting him to **cancel his Windsurf subscription**.
*   He acknowledges that **Cursor might still be better** for users who heavily rely on real-time, inline code auto-completion suggestions, a workflow he doesn't personally favor.
*   **Future plans:**
    *   Integrating a code search tool (mentions "Code Reflex", possibly typo for CodeGrep or similar) into his mCP server for better code navigation.
    *   Creating more short videos focused on MCPs.
    *   Investigating the new "Claude Code" offering to see what it offers beyond Claude+MCPs, potentially adding matching tools to his server.
    *   Exploring the burgeoning landscape of new LLMs (Groq, Gemini Flash, local models like Phi-3, Gemma 2, DeepSeek) **specifically for their tool-using (MCP) capabilities**. He finds current platforms lacking and is working on a side project to connect *any* LLM (API or local) to *any* MCP for testing, with a particular interest in local models + MCPs for fully offline, private AI workflows.
*   He ends with a call to action (subscribe, like, comment, share, Super Thanks).

