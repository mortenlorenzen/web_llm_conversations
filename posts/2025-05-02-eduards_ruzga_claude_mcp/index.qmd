---
title: "Eduards Ruzga: Claude with MCPs Replaced Cursor & Windsurf"
description: |
  Eduards Ruzga explains how he has stopped using tools like Windsurf and Cursor, instead opting for a system that combines Anthropic's Claude AI with MCPs. He demonstrates the capabilities of his MCP server, which allows Claude to interact with the local machine, run long processes, access the file system, and edit code files.
categories:
  - "Building Stuff"
  - "Coding"
  - "MCP"
date: 2025-05-02
---

**:Model Instructions:** 

  ---

  
**:You:** please summarize this video in detail

[![Claude with MCPs Replaced Cursor & Windsurf — How Did That Happen?](https://i.ytimg.com/vi/ly3bed99Dy8/maxresdefault.jpg)](https://www.youtube.com/watch?v=ly3bed99Dy8)

---

**:01JR0E39PYK7YKH4FBR4W00CMV::gemini-2.5-pro-exp-03-25:** Okay, here is a detailed summary of the YouTube video "Claude with MCPs Replaced Cursor & Windsurf — How Did That Happen?" by Eduards Ruzga:

**Core Argument & Introduction:**

*   The speaker, Eduards Ruzga, explains that he has unexpectedly stopped using paid tools like Windsurf (code-aware IDE/chat) and Cursor (AI-first code editor), despite having started paying for Windsurf in December.
*   The primary reason for this shift is his adoption and development of a system combining Anthropic's Claude AI with **MCPs (Master Control Programs/Protocols)**.
*   He highlights that giving Claude access to tools via MCPs drastically increases its utility. His own usage of Claude has increased 5x in the last three months compared to previous periods, demonstrating this enhanced value.
*   He has developed his own **"mCP server"** which allows Claude to interact with the user's local machine. This server enables:
    *   Running **long-running processes** (e.g., video encoding) without blocking the chat, managing them via process IDs.
    *   Accessing the **file system** for tasks like large codebase exploration, reading files/READMEs, generating documentation, and creating diagrams.
    *   **Editing code files**, including diff editing, multi-file editing, and even multi-repository operations (he gives an example of migrating 30 files/3.5k lines for a side project with only one manual fix needed).

**MCP Server Installation:**

*   Eduards has published his mCP server to npm and made it easily installable via **Smi (Sidecar Manager Interface)**.
*   He demonstrates the simple, one-line installation process in the terminal, requiring only Node.js and the Claude Desktop App to be pre-installed.
*   After restarting the Claude app, the server automatically connects and adds around 19 tools (list directories, edit files, execute commands, kill processes, etc.) to Claude's capabilities within the chat interface.

**Demonstration 1: Codebase Exploration & Diagramming:**

*   He showcases using Claude + MCPs to explore the mCP server's own codebase.
*   He instructs Claude to explore a given directory path, read relevant files (README, package.json, source files), understand the structure and functionality, and generate **Mermaid.js diagrams** directly within the chat window.
*   Claude successfully lists files, reads key code files, and produces several diagrams (component, sequence, architecture) explaining how the mCP server works, including handling terminal commands and long-running processes.
*   He praises this as a way to quickly understand unfamiliar codebases and highlights the advantage of having visual artifacts directly in the chat, something not typically done with Windsurf/Cursor.

**Comparison with Windsurf:**

*   He attempts the same codebase exploration and diagramming task using Windsurf (with Claude 3 Sonnet model).
*   Windsurf *can* perform the task but requires generating an external **HTML file** for the diagrams, lacking the inline visual benefit.
*   He points out several **friction points** with Windsurf for this use case: needing to open the project folder first, waiting for indexing/loading, occasional errors (like a "Cascade" error during his first attempt), sometimes reading only partial files (though it seemed okay in this specific instance), and generally feeling less direct and more cumbersome than simply giving Claude a path.

**Demonstration 2: Long-Running Processes (Video Encoding):**

*   He shows a pre-recorded chat demonstrating Claude using the mCP server to **compress a large video file (2.5GB)** using FFmpeg.
*   Claude executes commands to analyze the file, then starts the FFmpeg compression process.
*   Crucially, the mCP server runs FFmpeg in the background, returns a **process ID** to Claude, and allows Claude to periodically query the process for new output/status updates without blocking the chat.
*   He demonstrates asking Claude for progress updates, where Claude reads the latest FFmpeg output, calculates remaining time, and reports on bitrate reduction.
*   Finally, Claude confirms the process completion and reports the significantly reduced file size (237MB).
*   This showcases a capability (managing long-running, complex local tasks) that typical AI code assistants like Windsurf/Cursor are not designed for.

**Demonstration 3: Coding & Development (Live Project):**

*   He performs a live coding session to demonstrate creating a simple web application from scratch using Claude + MCPs.
*   The goal: a webpage with a full-screen webcam feed that uses **MediaPipe** for hand gesture detection to allow drawing and erasing on the screen.
*   Claude:
    *   Creates a new project folder.
    *   Writes the initial HTML, CSS, and JavaScript files, including necessary library imports.
    *   Opens the resulting `index.html` in the browser.
    *   Iteratively refines the application based on his requests: adding a circle cursor for drawing, implementing erasing with an open palm gesture, adjusting cursor/eraser size based on hand distance, removing unwanted features (two-finger mode switching, thumbs-up clearing).
    *   Demonstrates both **full file rewrites** and more precise **block editing** (showing the diff-like instructions it uses).
    *   Successfully implements size scaling for both drawing and erasing based on palm size/distance.
    *   Finally, initializes a Git repository, creates a `.gitignore` file, adds files, commits, adds a remote GitHub URL, and pushes the code to the repository.
    *   He then manually sets up GitHub Pages to deploy the web app live.

**Conclusions & Future Plans:**

*   Eduards concludes that Claude combined with his mCP server offers a more **open and flexible** environment compared to the more "boxed-in" experience of Windsurf/Cursor, especially for tasks beyond pure code editing within a project context (like system-level tasks, long processes, arbitrary file manipulation).
*   The reduced friction and broader capabilities led him to use Windsurf/Cursor less and less, prompting him to **cancel his Windsurf subscription**.
*   He acknowledges that **Cursor might still be better** for users who heavily rely on real-time, inline code auto-completion suggestions, a workflow he doesn't personally favor.
*   **Future plans:**
    *   Integrating a code search tool (mentions "Code Reflex", possibly typo for CodeGrep or similar) into his mCP server for better code navigation.
    *   Creating more short videos focused on MCPs.
    *   Investigating the new "Claude Code" offering to see what it offers beyond Claude+MCPs, potentially adding matching tools to his server.
    *   Exploring the burgeoning landscape of new LLMs (Groq, Gemini Flash, local models like Phi-3, Gemma 2, DeepSeek) **specifically for their tool-using (MCP) capabilities**. He finds current platforms lacking and is working on a side project to connect *any* LLM (API or local) to *any* MCP for testing, with a particular interest in local models + MCPs for fully offline, private AI workflows.
*   He ends with a call to action (subscribe, like, comment, share, Super Thanks).


---

---

---


title: Income Stream Surfers: "Desktop Commander" MCP
date: 2025-05-04 11:31:27

**:Model Instructions:** 

  
**:You:** please summarize this video in detail

[![Anthropic Cooked AGAIN: RIP CURSOR/CLINE? (CLAUDE DESKTOP UPDATES)](https://i.ytimg.com/vi_webp/hSQ5cjr-WjM/maxresdefault.webp)](https://www.youtube.com/watch?v=hSQ5cjr-WjM)

---

**:01JR0E39PYK7YKH4FBR4W00CMV::gemini-2.5-pro-exp-03-25:** Okay, here is a detailed summary of the YouTube video "Anthropic Cooked AGAIN: RIP CURSOR/CLINE? (CLAUDE DESKTOP UPDATES)" by Income Stream Surfers:

**Introduction & Core Announcement:**

*   The video starts by highlighting a recent update from Anthropic for their Claude AI: the introduction of native support for MCPs (Model Capabilities Platforms, though the speaker initially misnames it) directly within the Claude web/desktop application.
*   This allows users to add and use tools (MCPs) like file system access or process execution directly in the Claude interface, without needing separate applications like Klein or relying solely on API integrations.
*   The speaker specifically focuses on testing the "Desktop Commander" MCP.
*   He also mentions the Claude "Max" plan ($90/month), noting its significantly higher rate limits compared to the Pro plan (5x more usage, approx. 225 messages every 5 hours). He posits that despite the high fixed cost, it could potentially be *cheaper* for heavy users (like developers building multiple projects) compared to paying per token via the API, which can run into hundreds or thousands of dollars.

**Installation & Setup:**

*   The speaker demonstrates the ease of installing the Desktop Commander MCP. He simply pastes the `npx install` command provided on the Desktop Commander website directly into the Claude chat window (using the already installed file install MCP to execute it).
*   After a quick restart of the Claude app, the Desktop Commander MCP appears in the available tools list.
*   He runs into an initial "access denied" error when trying to point the MCP to a specific local project directory. He quickly finds the configuration setting (File > Settings > Developer > Edit Config) and adds the desired path to the allowed directories, resolving the issue.

**Testing & Performance:**

*   The speaker uses one of his standard, complex prompts (available on his School community/channel) to instruct Claude (using the Desktop Commander/native file system MCP) to build a website project within the specified local directory.
*   He expresses strong positive feelings about the integrated workflow within the official Claude app, contrasting it with API interactions or using external tools like Klein or Cursor, which he feels can be "disjointed." He believes the conversation flow and context passing feel more natural and connected in the official front-end.
*   He speculates that front-end versions of models (like Claude's or ChatGPT's) might be inherently more capable or less prone to placeholder code compared to their API counterparts, possibly due to different internal context handling or optimization priorities (API often prioritizes token efficiency).
*   A key observation is that Claude, within this setup, successfully generates SVG icons/files, something he notes Klein struggled significantly with.
*   The code generation proceeds smoothly without hitting rate limits during the single project build. He acknowledges needing to press "continue" occasionally when the output gets cut off.

**Analysis & Impressions:**

*   **Model Quality:** The speaker is highly impressed with the quality of the generated code and *especially* the design of the resulting website. He calls the design "phenomenal," "delicious," and the "best design I've ever seen" from an AI coder. He suspects the Claude 3.5 Sonnet model available in the paid front-end might be a less "toned down" or more capable version than the one typically accessed via the API, possibly because the subscribers (likely heavy developers) demand higher quality. He uses OpenRouter usage stats for Sonnet to argue that developer usage dominates API consumption, suggesting Anthropic might optimize the API version for cost, while keeping the front-end version more powerful for subscribers.
*   **Desktop Commander vs. Native File System:** He clarifies later that he's not 100% certain if the Desktop Commander tool was strictly *required* or if Claude's native file system capabilities would have sufficed for writing the files. However, he feels it doesn't significantly impact his core positive assessment of the overall *system* (native MCPs, rate limits, model quality in the app). He notes Desktop Commander's unique ability to *run* processes (like `npm run dev`) and view output is cool, but wasn't the main focus here.
*   **Cost-Effectiveness:** He revisits the $90/month cost. Based on the observed rate limits (~225 messages/5 hours) and the complexity of the project generated, he estimates he could build roughly 5 such websites in 5 hours (1 per hour). Comparing this to an estimated $15 API cost per website, the Max plan ($90/month) appears significantly cheaper for anyone building even 6+ similar projects per month.
*   **Errors:** While overwhelmingly positive, he notes the generated project isn't perfect. He encounters an error when trying to run `npm rundev` and identifies a couple of other minor issues (text color, syntax errors in an Italian language file). However, he considers these easily fixable and minor compared to the overall quality.

**Conclusion:**

*   The speaker concludes that this update, combining native MCP support in the Claude app with the Max plan's high rate limits and the perceived high quality of the model in this environment, makes Claude potentially the "best AI coder on the market."
*   He finds the results "phenomenal" and "the most impressive AI code" he's seen, suggesting it surpasses alternatives like Klein and Cursor.
*   He plans to experiment more with this setup and expects to create more content about the Claude desktop app. He believes this development is a significant step forward for AI-assisted coding.



