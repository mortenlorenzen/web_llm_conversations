---
title: "Cole Medin: The 7 Node Blueprint for AI Agents in n8n"
description: |
  Cole Medin introduces the "Seven Node Blueprint for AI Agents," a structured framework for building complex AI agents in n8n, emphasizing the graph-like nature of agents and how to break down tasks into manageable components.
categories:
  - "Building Stuff"
  - "n8n"
  - "AI Agents"
date: 2025-05-12
---
**:Model Instructions:** 

  ---

  
**:You:** please summarize this video in detail

[![Give Me 28 Minutes and I'll Completely Change the Way You Build AI Agents](https://i.ytimg.com/vi/TV8SyEuSMIA/maxresdefault.jpg)](https://www.youtube.com/watch?v=TV8SyEuSMIA)

---

**:01JR0E39PYK7YKH4FBR4W00CMV::gemini-2.5-pro-exp-03-25:** Okay, here is a detailed summary of the YouTube video "Give Me 28 Minutes and I'll Completely Change the Way You Build AI Agents" by Cole Medin:

**Core Problem & Proposed Solution:**

The video addresses the challenge of building complex, robust AI agents, which goes beyond simply connecting an LLM to a few tools. The speaker, Cole Medin, notes that while basic agents are easy with no-code tools or assistants, tackling complex problems requires a structured approach. He introduces his mental model, the **"Seven Node Blueprint for AI Agents,"** designed to break down any complex agent-building task into manageable components.

**Fundamental Principle: Agents as Graphs**

Before detailing the nodes, Medin emphasizes a core concept: **AI agents are fundamentally graphs.**

*   Unlike traditional linear workflows, agents involve cycles: LLM reasoning -> Tool usage -> Feedback -> LLM reasoning, etc.
*   This cyclical, graph-like structure enables non-deterministic behavior, where the agent's path isn't fixed.
*   Thinking of agents as graphs allows developers to break them down into distinct components (nodes or "Lego bricks") that can be built individually and combined.

**The Seven Node Blueprint:**

The framework categorizes all components of an AI agent into one of seven types of "nodes":

1.  **LLM Node:** The "brain" of the agent. This is the Large Language Model itself (e.g., GPT-4, Claude 3.7) responsible for reasoning, decision-making, and deciding when to use tools.
2.  **Tool Node:** Performs actions on behalf of the LLM. Examples include web searches, code execution, database queries, API calls, etc. The LLM invokes these nodes.
3.  **Control Node:** Adds deterministic logic and structure to the agent's workflow. Unlike LLM nodes, these use predefined rules, code, or standard workflow logic (e.g., filters, conditional routing, if/else statements). They ensure specific actions happen predictably based on certain conditions or outputs.
4.  **Memory Node:** Handles the agent's memory. This includes:
    *   **Short-term memory:** Conversation history within a single session.
    *   **Long-term memory:** Persistent knowledge, often stored in vector databases or other knowledge bases, retrieved and updated across sessions. (Example shown uses a Google Doc for simplicity, mentions Mem O library).
5.  **Guardrail Node:** Ensures reliability and safety. These nodes validate inputs or outputs:
    *   **Input Guardrails:** Check user input before it reaches the main agent (e.g., is the budget request reasonable?).
    *   **Output Guardrails:** Check the agent's output before presenting it (e.g., does the generated itinerary match the requested duration? Does the output format meet requirements?). Can use LLMs or deterministic checks.
6.  **Fallback Node:** Handles errors gracefully. Instead of crashing, these nodes define what happens when something goes wrong (e.g., retry the failed step, provide a default error message to the user, log the error, alert an administrator).
7.  **User Input Node:** Allows for human interaction mid-process ("human-in-the-loop"). This node pauses the agent's execution to wait for user feedback, confirmation, or additional input before proceeding (e.g., confirming a hotel booking before executing it).

**Examples Using N8N:**

Medin uses the visual workflow tool N8N to demonstrate each concept:

*   **Basic Agent (LLM, Tool, Short-term Memory):** Shows a simple agent creating dishes and adding them to Airtable, illustrating the LLM-Tool cycle.
*   **Long-term Memory:** Adds steps to retrieve relevant info (user dislikes spicy mango) from a Google Doc before the LLM generates a dish, and a step to extract and save new memories after.
*   **User Input & Control Nodes:** An agent proposes sending a Slack message. A User Input node sends an approval request to the user via Slack DM. A Control Node then routes the flow based on the user's response (approve/decline), sending the message or a different notification accordingly.
*   **Guardrail Node (Output):** An agent generates a dish. An output guardrail (a "critic" LLM) checks if the output includes required elements (name, description, origin). If not, it provides feedback and triggers a retry (using another agent node).
*   **Fallback Node:** Modifies the User Input/Control example. If the user *declines* the Slack message, the Control Node routes to an error step, which triggers a dedicated error workflow (Fallback Node) that sends an alert (e.g., Slack message to an admin).

**(Sponsor Break):** Mentions Bright Data and their MCP server as a way to give agents unblockable, real-time web access for tasks like scraping LinkedIn bios or finding flight information, demonstrating its integration with an agent framework (Pydantic AI).

**Comprehensive Example Combining All Nodes:**

Medin presents a more complex N8N workflow demonstrating how all seven nodes work together to create a robust dish-generating agent:

1.  **Memory Node:** Fetches long-term memory (user preferences).
2.  **LLM Node + Tool Node + Memory Node (Short-term):** Primary agent generates a dish, using a tool to check an Airtable menu (avoid duplicates) and considering conversation history.
3.  **Guardrail Node:** An "output parser" ensures the output format (dish name, description) is correct, using a secondary LLM for auto-fixing if needed.
4.  **User Input Node:** Sends the proposed dish to Slack for human approval.
5.  **Control Node:** Routes based on approval.
    *   If Approved: Sends confirmation (Control Node), adds dish to Airtable (Control Node).
    *   If Declined: Triggers error workflow (Fallback Node).
6.  **Memory Node:** Another LLM extracts key memories from the interaction (e.g., user requested no existing menu items).
7.  **Memory Node:** Saves extracted memories to long-term storage (Google Doc).
8.  **LLM Node:** Summarizes and presents the final output.

**Conclusion & Takeaway:**

The Seven Node Blueprint provides a structured way to think about and build complex AI agents by breaking the problem into manageable parts. By considering each node type (Do I need memory? What guardrails? How should errors be handled?), developers can systematically design more robust and reliable agents. The graph-based nature of agents is key to this modular approach. Medin plans future content on specific nodes and frameworks like Pydantic AI and LangGraph that embrace this graph abstraction.

