---
title: "Arseny Shatokhin: Developers need to prepare for a future of agentic coding"
description: |
  Arseny Shatokhin provides actionable advice for developers to adapt to the rapidly changing landscape of AI in software development, emphasizing the need for mastering AI tools, building autonomous AI agents, and shifting towards strategic roles.
categories:
  - "AI Technology"
date: 2025-05-13
image: agentic_coding.png
---

**:Model Instructions:** 

  ---

  
**:You:** please summarize this video in detail

[![Developers Are WRONG About AI "Not Taking Our Jobs”](https://i.ytimg.com/vi_webp/2_v2T5xz9QM/maxresdefault.webp)](https://www.youtube.com/watch?v=2_v2T5xz9QM)

---

**:01JR0E39PYK7YKH4FBR4W00CMV::gemini-2.5-pro-exp-03-25:** Okay, here is a detailed summary of the YouTube video "Developers Are WRONG About AI 'Not Taking Our Jobs'" by Arseny Shatokhin:

**Core Argument:**

The video argues strongly against the common sentiment among developers that AI will merely be a tool and won't replace their jobs. The speaker, Arseny Shatokhin (who manages developers and builds AI agents), contends that AI is rapidly advancing towards automating and replacing a significant portion, if not the vast majority, of programming jobs, potentially as soon as 2025. He emphasizes that simply using AI tools (the "assistance" phase) is insufficient; developers need to prepare for a future of "agentic coding" where AI performs implementation autonomously.

**Key Points & Evidence:**

1.  **Alarming Predictions & Current Trends:**
    *   Opens with quotes suggesting 50-90% of development will be done by AI very soon (within months to a year).
    *   Highlights recent tech layoffs (Google, Meta, Cisco etc.) happening concurrently with massive AI investments by the same companies.
    *   Cites current AI models ranking high in programming benchmarks (top 50) and Sam Altman's prediction of a #1 AI programmer by end of the year.
    *   Mentions CEOs of Google and Microsoft stating AI already generates 20-30%+ of their internal code.

2.  **Historical Analogy: The Weavers:**
    *   Compares the current situation to the Industrial Revolution's impact on skilled weavers in the 19th century.
    *   Weaving was initially a high-paying, skilled, remote-friendly job (like developers).
    *   The power loom (an automation tool) first increased productivity (1 weaver = 10-20x output) but led to factory work and wage drops.
    *   Over time (~100 years), the industry became almost fully automated, with machines replacing weavers entirely.
    *   Argues this transition from assistance to full automation could happen much faster now with AI (1-2 years vs. 150).

3.  **The Labor Automation Curve:**
    *   Presents a model with three stages:
        *   **Manual:** Linear effort-to-output.
        *   **Assistance:** Non-linear output; humans use tools to amplify effort (10x+). This is the current stage with AI co-pilots, IDEs ("vibe coding"). AI still needs supervision.
        *   **Agency:** Exponential output (1000x+); machines implement autonomously based on human design/direction ("agentic coding"). Humans focus on high-level strategy and oversight.
    *   Predicts we are rapidly moving from the end of the Assistance stage into the Agency stage.

4.  **Addressing Counterarguments:**
    *   Acknowledges skepticism: Cites an Antropic paper suggesting LLMs might mimic reasoning rather than truly think, and Yann LeCun's view that LLMs might not be the path to AGI and past AI paradigms have hit limits.
    *   Rebuttal: Argues that even if current LLMs aren't the final answer, the *current* technology is already transformative enough to disrupt the industry significantly *this year*. The exact path to AGI doesn't negate the immediate impact.

5.  **Demo: AI Website Builder Agent:**
    *   Showcases an AI agent built by his company that generates a complete Next.js e-commerce website.
    *   Process involves: User provides logo/description -> AI analyzes trends -> AI sources products (Google Shopping API) -> AI generates content & code -> AI performs QA/validation -> AI deploys to Vercel via GitHub -> Final checks.
    *   Emphasizes this "agentic" approach is faster and more hands-free than "vibe coding" (AI assistance), handling complex tasks autonomously.

**The 6-Step Survival Guide:**

The core of the video provides actionable advice for developers:

1.  **Stay Ahead of the Curve:** Actively research, test, and adopt the latest AI tools daily (coding IDEs, chat models, LLM APIs, UI builders, agent frameworks). Use resources like Twitter, newsletters (Readwise), and YouTube.
2.  **Master AI Coding (Assistance Stage):** Learn to effectively use current AI tools for coding. Key tips: Plan/break down tasks, instruct AI to write tests first, use Memory/Context Providers (MCPs like MEM0), use different AI models strategically (e.g., GPT-4.1 for implementation, reasoning models for planning). This is a prerequisite for agentic coding.
3.  **Build AI Agents (Agency Stage):** This is the *most crucial* skill. Learn how to build agents that automate tasks (essentially, learn to replace yourself). Follow an iterative process: Build MVP -> Deploy -> Evaluate (with real data) -> Iterate.
4.  **Move to Senior Roles:** Focus on roles less easily automated: Architect, Product Lead, UX Designer. These require deep context, strategic thinking, understanding history, market, vision, and user experience – the "how" and "why," not just the implementation "what."
5.  **Start a Side Hustle/Startup:** Leverage AI's productivity gains for yourself, not just an employer. Become an entrepreneur. AI enables solo founders or small teams to build significant businesses. Shift from accumulating salary to accumulating assets.
6.  **Share Your Experience / Build a Brand:** As implementation gets automated, distribution and authenticity become paramount. Build a personal brand, create content, foster a community. Genuine human connection is valuable and irreplaceable.

**Final Thoughts on Learning Code:**

*   **Yes, still learn to code.** Not primarily for a job *writing* code, but because:
    *   It provides mental models to understand technology and communicate better with AI.
    *   It's necessary for building AI agents (most interact with code/APIs).
    *   It develops crucial problem-solving skills needed to apply AI effectively.

**Overall Message:**

The era of the traditional software developer whose primary skill is writing code is rapidly ending due to AI advancement. Developers must urgently adapt by mastering current AI tools, learning to build autonomous AI agents to automate tasks, moving into strategic/design roles, and potentially becoming entrepreneurs leveraging AI. Building a personal brand and community is also crucial for long-term relevance.

