---
title: "Codex Community: Claude & MCP - Top 10 MCP Use Cases"
description: |
  Codex Community showcases the Model Context Protocol (MCP) and its top 10 use cases, demonstrating how AI agents like Claude can interact with various tools and services to automate tasks, manage files, send emails, and more.
categories:
  - "Building Stuff"
  - "MCP"
  - "AI Agents"
date: 2025-05-04
---

**:Model Instructions:** 

  ---

  
**:You:** please summarize this video in detail

[![Top 10 MCP Use Cases - Using Claude & Model Context Protocol](https://i.ytimg.com/vi_webp/lzbbPBLPtdY/maxresdefault.webp)](https://www.youtube.com/watch?v=lzbbPBLPtdY)

---

**:01JR0E39PYK7YKH4FBR4W00CMV::gemini-2.5-pro-exp-03-25:** Okay, here is a detailed summary of the YouTube video "Top 10 MCP Use Cases - Using Claude & Model Context Protocol":

**Introduction:**

The video introduces the Model Context Protocol (MCP) as a way for AI agents (like Claude) to interact with and control various tools. These tools can be on the user's local computer (like the file system or terminal) or third-party services (like Figma, Docker, Gmail). The video aims to showcase 10 practical use cases for MCP for developers and designers.

**Setup Process:**

1.  **Interface:** The presenter uses Claude Desktop as the primary interface to connect AI models with the desired tools via MCP.
2.  **Compatibility:** MCP works on both macOS (preferred) and Windows, though setup might differ slightly.
3.  **Installation & Login:** Claude Desktop needs to be installed and logged into (e.g., using Google OAuth).
4.  **Enabling Developer Mode:** The crucial step is enabling developer mode within Claude Desktop settings.
5.  **Configuration:** Users need to edit the JSON configuration file (opened via the developer settings) to grant MCP access to specific protocols/tools. The presenter demonstrates adding configuration for file system access, requiring the user to update the placeholder username with their actual username.
6.  **Restart & Verification:** After saving the configuration and restarting Claude Desktop, a new "tool icon" appears, indicating MCP is active. Clicking it shows the installed MCP protocols/tools available.

**Top MCP Use Cases Demonstrated:**

1.  **File Organization:**
    *   **Goal:** Automatically organize a messy folder, like the Downloads folder.
    *   **Process:** Grant Claude access to the specified directory (requires user approval). Claude lists files and folders, then follows prompts to organize them (e.g., move files into type-specific folders like Images, Installers, Videos) and delete duplicates.
    *   **Result:** A much neater folder structure. (Mentioned hitting message length limits during the process).

2.  **Sending Emails:**
    *   **Goal:** Have the AI compose and send emails directly from the user's email account, bypassing manual copy-pasting.
    *   **Tool:** Uses Zapier Actions as an MCP server to connect Claude to Gmail.
    *   **Setup:** Connect Gmail action in Zapier. Copy the provided MCP server configuration (including a secret key) from Zapier into the Claude Desktop JSON configuration file. Restart Claude.
    *   **Example:** Prompt Claude to send an email to the user about a design course ("enhanced UI"). Claude uses the Zapier MCP tool (requiring approval) to send the email.
    *   **Result:** The email arrives immediately, sent from the user's actual email address with the requested content and links.

3.  **Email Management:**
    *   **Goal:** Use AI to manage and organize the email inbox.
    *   **Tool:** Adds more Zapier actions for Gmail (labeling, deleting, finding emails).
    *   **Example:** Prompt Claude to organize the inbox. Claude scans emails, labels important ones, and deletes unwanted ones (like the previous test email).
    *   **Other Possibilities:** Mentioned using MCP for drafting replies or other email tasks.

4.  **Web Browser Control (Web Scraping/Summarization):**
    *   **Goal:** Allow the AI to control a web browser to perform tasks online.
    *   **Tool:** Uses Puppeteer (a Node library to control Chrome/Chromium) integrated as an MCP tool via a specific "web tool" configuration syntax added to the JSON file.
    *   **Example:** Ask Claude to summarize the best articles from dev.to from the past week. Claude requests permission, launches Puppeteer (visible browser window), navigates the site, gathers information, and provides a summary of relevant articles.

5.  **WhatsApp Messaging:**
    *   **Goal:** Send messages directly to WhatsApp via the AI.
    *   **Tool:** Connects WhatsApp via Zapier Actions, making it available as an MCP tool in Claude.
    *   **Example:** Ask Claude to send a "Hello World" message along with an explanation of a JavaScript function to the user's WhatsApp number.
    *   **Result:** The message appears on the user's WhatsApp.

**Other Mentioned Use Cases (Briefly Shown/Discussed):**

6.  **Blender Integration:** Connecting Claude to Blender via MCP to generate and manipulate 3D models and scenes based on prompts or even reference images (e.g., from Midjourney). Includes an example of recreating a Blender model as a web-based 3D scene using JavaScript/Three.js.
7.  **Figma Integration:** Controlling Figma via MCP to create UI designs (e.g., designing a mobile login screen).
8.  **Docker Control:** Managing Docker containers and images.
9.  **GitHub Updates:** Interacting with GitHub repositories (e.g., updating code).
10. **Spotify Control:** Managing Spotify libraries or playback.

**Conclusion:**

The presenter emphasizes that these examples are just the "tip of the iceberg." MCP allows connecting AI to potentially anything imaginable using official or third-party MCP servers. The video ends by asking viewers if they found it interesting and if they'd like a deeper dive into MCP and its creative possibilities.

